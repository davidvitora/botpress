"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SenarioRunner = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const TIMEOUT = 3000;

class SenarioRunner {
  constructor(bp) {
    this.bp = bp;

    _defineProperty(this, "_active", void 0);

    _defineProperty(this, "_status", void 0);

    _defineProperty(this, "_interval", void 0);

    _defineProperty(this, "_sendMessage", (message, eventDestination) => {
      setTimeout(() => {
        const event = this.bp.IO.Event({ ...eventDestination,
          direction: 'incoming',
          payload: {
            type: 'text',
            text: message
          },
          type: 'text'
        });
        this.bp.events.sendEvent(event);
      }, 1000);
    });

    this._active = [];
  }

  startReplay() {
    this._status = {};
    this._active = [];
    this._interval = setInterval(this._checkScenarioTimeout.bind(this), 5000);
  }

  processIncoming(event) {
    if (!this._active.length) {
      return;
    }

    const scenario = this._active.find(x => x.eventDestination.target === event.target);

    if (scenario && !scenario.completedSteps.length) {
      // The hook will replace the state with the one received here
      return scenario.initialState;
    }
  }

  processCompleted(event) {
    if (!this._active.length) {
      return;
    }

    const scenario = this._active.find(x => x.eventDestination.target === event.target);

    if (!scenario) {
      return;
    }

    const {
      name,
      completedSteps,
      steps
    } = scenario;
    const conversation = (0, _utils.convertLastMessages)(event.state.session.lastMessages, event.id);

    if (!conversation) {
      this._failScenario(name, {
        reason: 'Could not extract messages for the event ' + event.id
      });

      return;
    }

    const mismatch = this._findMismatch(steps[completedSteps.length], conversation);

    if (mismatch) {
      return this._failScenario(name, mismatch);
    } else {
      completedSteps.push(conversation);

      this._updateStatus(name, {
        completedSteps: completedSteps.length
      });
    }

    if (steps.length !== completedSteps.length) {
      scenario.lastEventTs = +new Date();

      this._sendMessage(steps[completedSteps.length].userMessage, scenario.eventDestination);
    } else {
      this._passScenario(name);
    }
  }

  runScenario(scenario, eventDestination) {
    const firstMessage = scenario.steps[0].userMessage;

    if (!firstMessage) {
      return;
    }

    this._active.push({ ...scenario,
      eventDestination,
      completedSteps: []
    });

    this._sendMessage(firstMessage, eventDestination);

    this._updateStatus(scenario.name, {
      status: 'pending',
      completedSteps: 0
    });
  }

  getStatus(scenarioName) {
    return this._status && this._status[scenarioName] || {};
  }

  isRunning() {
    return !!this._active.length;
  }

  _findMismatch(expected, received) {
    let mismatch = undefined; // This shouldn't happen

    if (!expected || !received || expected.userMessage !== received.userMessage) {
      return {
        reason: 'Expected or received step was invalid',
        expected,
        received
      };
    } // Inside each steps, the bot may reply multiple times


    _lodash.default.each(_lodash.default.zip(expected.botReplies, received.botReplies), ([exp, rec], idx) => {
      // This can happen if the bot doesn't respond
      if (!exp || !rec) {
        mismatch = {
          reason: 'Missing an expected or received reply',
          expected,
          received,
          index: idx
        };
        return false;
      }

      const sameSource = exp.replySource === rec.replySource;
      const sameResponse = exp.botResponse === rec.botResponse;
      const source = exp.replySource.split(' ').shift(); // extracting the first part (module) for the reply

      /**
       * Different sources are definitely not what is expected
       * If QNA has the exact same source, then we don't care about the response (variations)
       * If the source is Dialog Manager, then the answer must be identical (either payload or content element id)
       */

      if (!sameSource || source !== 'qna' && source === 'dialogManager' && !sameResponse) {
        mismatch = {
          reason: 'The reply was invalid',
          expected,
          received,
          index: idx
        };
        return false;
      }
    });

    return mismatch;
  }

  _checkScenarioTimeout() {
    if (!this._active.length) {
      this._interval && clearInterval(this._interval);
      return;
    }

    const now = +new Date();
    const mismatch = {
      reason: 'The scenario timed out'
    };

    this._active.filter(s => s.lastEventTs !== undefined && now - s.lastEventTs > TIMEOUT).map(x => this._failScenario(x.name, mismatch));
  }

  _passScenario(name) {
    this._updateStatus(name, {
      status: 'pass'
    });

    this._active = this._active.filter(x => x.name !== name);
  }

  _failScenario(name, mismatch) {
    this._updateStatus(name, {
      status: 'fail',
      mismatch
    });

    this._active = this._active.filter(x => x.name !== name);
  }

  _updateStatus(scenario, obj) {
    this._status[scenario] = { ...(this._status[scenario] || {}),
      ...obj
    };
  }

}

exports.SenarioRunner = SenarioRunner;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,