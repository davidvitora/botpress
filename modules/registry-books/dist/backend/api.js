"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _default = async bp => {
  const router = bp.http.createRouterForBot('registry-books');
  const knex = bp.database; //Get all categories

  router.get('/category', async (req, res) => {
    const {
      dateBegin,
      dateEnd,
      showAll
    } = req.query;
    const {
      botId
    } = req.params;
    let categories = [];

    if (showAll == 'true') {
      categories = await knex('registry_books').select('category').countDistinct('data as registry_count').orderBy('category').where('botId', botId).groupBy('category');
    } else {
      categories = await knex('registry_books').select('category').countDistinct('data as registry_count').orderBy('category').where('registered_on', '>=', dateBegin).where('registered_on', '<=', dateEnd).where('botId', botId).groupBy('category');
    }

    res.send({
      categories
    });
  });
  router.get('/category/:id', async (req, res) => {
    const {
      dateBegin,
      dateEnd,
      showAll,
      limit = null,
      offset = 0
    } = req.query;
    const {
      id,
      botId
    } = req.params;
    const query = knex('registry_books').select(['data', 'data_key']).sum('hit_count as hit_count').where({
      'category': id,
      botId: botId
    }).clone(); // Will consider date

    if (showAll != 'true') {
      query.where('registered_on', '>=', dateBegin).where('registered_on', '<=', dateEnd).clone();
    } //Will consider offset and limit


    if (limit != null) {
      query.limit(limit).offset(offset).clone();
    }

    const category = await query.groupBy(['data', 'data_key']).orderBy('hit_count', 'desc');
    res.send(category);
  });
  router.post('/registry/delete', async (req, res) => {
    const {
      data_key,
      category,
      dateBegin,
      dateEnd,
      deleteAll
    } = req.body;
    const {
      botId
    } = req.params;
    const query = knex('registry_books').where('data_key', data_key).where('category', category).where('botId', botId).clone(); // Will consider date

    if (deleteAll != true) {
      query.where('registered_on', '>=', dateBegin).where('registered_on', '<=', dateEnd).clone();
    }

    const rows = await query.del();
    res.send({
      affectedRows: rows
    });
  });
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS50cyJdLCJuYW1lcyI6WyJicCIsInJvdXRlciIsImh0dHAiLCJjcmVhdGVSb3V0ZXJGb3JCb3QiLCJrbmV4IiwiZGF0YWJhc2UiLCJnZXQiLCJyZXEiLCJyZXMiLCJkYXRlQmVnaW4iLCJkYXRlRW5kIiwic2hvd0FsbCIsInF1ZXJ5IiwiYm90SWQiLCJwYXJhbXMiLCJjYXRlZ29yaWVzIiwic2VsZWN0IiwiY291bnREaXN0aW5jdCIsIm9yZGVyQnkiLCJ3aGVyZSIsImdyb3VwQnkiLCJzZW5kIiwibGltaXQiLCJvZmZzZXQiLCJpZCIsInN1bSIsImNsb25lIiwiY2F0ZWdvcnkiLCJwb3N0IiwiZGF0YV9rZXkiLCJkZWxldGVBbGwiLCJib2R5Iiwicm93cyIsImRlbCIsImFmZmVjdGVkUm93cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztlQUVlLE1BQU9BLEVBQVAsSUFBMEI7QUFDdkMsUUFBTUMsTUFBTSxHQUFHRCxFQUFFLENBQUNFLElBQUgsQ0FBUUMsa0JBQVIsQ0FBMkIsZ0JBQTNCLENBQWY7QUFDQSxRQUFNQyxJQUFJLEdBQUdKLEVBQUUsQ0FBQ0ssUUFBaEIsQ0FGdUMsQ0FJdkM7O0FBQ0FKLEVBQUFBLE1BQU0sQ0FBQ0ssR0FBUCxDQUFXLFdBQVgsRUFBd0IsT0FBT0MsR0FBUCxFQUFZQyxHQUFaLEtBQW9CO0FBQzFDLFVBQU07QUFBRUMsTUFBQUEsU0FBRjtBQUFhQyxNQUFBQSxPQUFiO0FBQXNCQyxNQUFBQTtBQUF0QixRQUFrQ0osR0FBRyxDQUFDSyxLQUE1QztBQUNBLFVBQU07QUFBRUMsTUFBQUE7QUFBRixRQUFZTixHQUFHLENBQUNPLE1BQXRCO0FBQ0EsUUFBSUMsVUFBVSxHQUFHLEVBQWpCOztBQUNBLFFBQUlKLE9BQU8sSUFBSSxNQUFmLEVBQXVCO0FBQ3JCSSxNQUFBQSxVQUFVLEdBQUcsTUFBTVgsSUFBSSxDQUFDLGdCQUFELENBQUosQ0FBdUJZLE1BQXZCLENBQThCLFVBQTlCLEVBQTBDQyxhQUExQyxDQUF3RCx3QkFBeEQsRUFB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QUhLLEVBR0lOLEtBSEosRUFHV2EsS0FIWCxFQUFkLENBSGtELENBUWxEOztBQUNBLFFBQUlJLFNBQVMsSUFBSSxJQUFqQixFQUF1QjtBQUNyQmxCLE1BQUFBLEtBQUssQ0FBQ08sS0FBTixDQUFZLGVBQVosRUFBNkIsSUFBN0IsRUFBbUNWLFNBQW5DLEVBQThDVSxLQUE5QyxDQUFvRCxlQUFwRCxFQUFxRSxJQUFyRSxFQUEyRVQsT0FBM0UsRUFBb0ZnQixLQUFwRjtBQUNEOztBQUVELFVBQU1NLElBQUksR0FBRyxNQUFNcEIsS0FBSyxDQUFDcUIsR0FBTixFQUFuQjtBQUNBekIsSUFBQUEsR0FBRyxDQUFDYSxJQUFKLENBQVM7QUFBRWEsTUFBQUEsWUFBWSxFQUFFRjtBQUFoQixLQUFUO0FBQ0QsR0FmRDtBQW1CRCxDIiwic291cmNlUm9vdCI6IkQ6XFxDb2RpZ28gQm90cHJlc3NcXGJvdHByZXNzXFxtb2R1bGVzXFxyZWdpc3RyeS1ib29rc1xcc3JjXFxiYWNrZW5kIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgc2RrIGZyb20gJ2JvdHByZXNzL3NkaydcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFzeW5jIChicDogdHlwZW9mIHNkaykgPT4ge1xyXG4gIGNvbnN0IHJvdXRlciA9IGJwLmh0dHAuY3JlYXRlUm91dGVyRm9yQm90KCdyZWdpc3RyeS1ib29rcycpXHJcbiAgY29uc3Qga25leCA9IGJwLmRhdGFiYXNlXHJcblxyXG4gIC8vR2V0IGFsbCBjYXRlZ29yaWVzXHJcbiAgcm91dGVyLmdldCgnL2NhdGVnb3J5JywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XHJcbiAgICBjb25zdCB7IGRhdGVCZWdpbiwgZGF0ZUVuZCwgc2hvd0FsbCB9ID0gcmVxLnF1ZXJ5XHJcbiAgICBjb25zdCB7IGJvdElkIH0gPSByZXEucGFyYW1zXHJcbiAgICBsZXQgY2F0ZWdvcmllcyA9IFtdXHJcbiAgICBpZiAoc2hvd0FsbCA9PSAndHJ1ZScpIHtcclxuICAgICAgY2F0ZWdvcmllcyA9IGF3YWl0IGtuZXgoJ3JlZ2lzdHJ5X2Jvb2tzJykuc2VsZWN0KCdjYXRlZ29yeScpLmNvdW50RGlzdGluY3QoJ2RhdGEgYXMgcmVnaXN0cnlfY291bnQnKS5vcmRlckJ5KCdjYXRlZ29yeScpXHJcbiAgICAgICAgLndoZXJlKCdib3RJZCcsIGJvdElkKVxyXG4gICAgICAgIC5ncm91cEJ5KCdjYXRlZ29yeScpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjYXRlZ29yaWVzID0gYXdhaXQga25leCgncmVnaXN0cnlfYm9va3MnKS5zZWxlY3QoJ2NhdGVnb3J5JykuY291bnREaXN0aW5jdCgnZGF0YSBhcyByZWdpc3RyeV9jb3VudCcpLm9yZGVyQnkoJ2NhdGVnb3J5JylcclxuICAgICAgICAud2hlcmUoJ3JlZ2lzdGVyZWRfb24nLCAnPj0nLCBkYXRlQmVnaW4pLndoZXJlKCdyZWdpc3RlcmVkX29uJywgJzw9JywgZGF0ZUVuZClcclxuICAgICAgICAud2hlcmUoJ2JvdElkJywgYm90SWQpXHJcbiAgICAgICAgLmdyb3VwQnkoJ2NhdGVnb3J5Jyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVzLnNlbmQoeyBjYXRlZ29yaWVzIH0pXHJcbiAgfSlcclxuXHJcbiAgcm91dGVyLmdldCgnL2NhdGVnb3J5LzppZCcsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xyXG4gICAgY29uc3QgeyBkYXRlQmVnaW4sIGRhdGVFbmQsIHNob3dBbGwsIGxpbWl0ID0gbnVsbCwgb2Zmc2V0ID0gMCB9ID0gcmVxLnF1ZXJ5XHJcbiAgICBjb25zdCB7IGlkLCBib3RJZCB9ID0gcmVxLnBhcmFtc1xyXG4gICAgY29uc3QgcXVlcnkgPSBrbmV4KCdyZWdpc3RyeV9ib29rcycpLnNlbGVjdChbJ2RhdGEnLCAnZGF0YV9rZXknXSkuc3VtKCdoaXRfY291bnQgYXMgaGl0X2NvdW50JylcclxuICAgICAgLndoZXJlKHsgJ2NhdGVnb3J5JzogaWQsIGJvdElkOiBib3RJZCB9KS5jbG9uZSgpXHJcblxyXG4gICAgLy8gV2lsbCBjb25zaWRlciBkYXRlXHJcbiAgICBpZiAoc2hvd0FsbCAhPSAndHJ1ZScpIHtcclxuICAgICAgcXVlcnkud2hlcmUoJ3JlZ2lzdGVyZWRfb24nLCAnPj0nLCBkYXRlQmVnaW4pLndoZXJlKCdyZWdpc3RlcmVkX29uJywgJzw9JywgZGF0ZUVuZCkuY2xvbmUoKVxyXG4gICAgfVxyXG5cclxuICAgIC8vV2lsbCBjb25zaWRlciBvZmZzZXQgYW5kIGxpbWl0XHJcbiAgICBpZiAobGltaXQgIT0gbnVsbCkge1xyXG4gICAgICBxdWVyeS5saW1pdChsaW1pdCkub2Zmc2V0KG9mZnNldCkuY2xvbmUoKVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGNhdGVnb3J5ID0gYXdhaXQgcXVlcnkuZ3JvdXBCeShbJ2RhdGEnLCAnZGF0YV9rZXknXSkub3JkZXJCeSgnaGl0X2NvdW50JywgJ2Rlc2MnKTtcclxuICAgIHJlcy5zZW5kKGNhdGVnb3J5KVxyXG4gIH0pXHJcblxyXG4gIHJvdXRlci5wb3N0KCcvcmVnaXN0cnkvZGVsZXRlJywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XHJcbiAgICBjb25zdCB7IGRhdGFfa2V5LCBjYXRlZ29yeSwgZGF0ZUJlZ2luLCBkYXRlRW5kLCBkZWxldGVBbGwgfSA9IHJlcS5ib2R5XHJcbiAgICBjb25zdCB7IGJvdElkIH0gPSByZXEucGFyYW1zO1xyXG4gICAgY29uc3QgcXVlcnkgPSBrbmV4KCdyZWdpc3RyeV9ib29rcycpXHJcbiAgICAgIC53aGVyZSgnZGF0YV9rZXknLCBkYXRhX2tleSlcclxuICAgICAgLndoZXJlKCdjYXRlZ29yeScsIGNhdGVnb3J5KVxyXG4gICAgICAud2hlcmUoJ2JvdElkJywgYm90SWQpLmNsb25lKClcclxuXHJcbiAgICAvLyBXaWxsIGNvbnNpZGVyIGRhdGVcclxuICAgIGlmIChkZWxldGVBbGwgIT0gdHJ1ZSkge1xyXG4gICAgICBxdWVyeS53aGVyZSgncmVnaXN0ZXJlZF9vbicsICc+PScsIGRhdGVCZWdpbikud2hlcmUoJ3JlZ2lzdGVyZWRfb24nLCAnPD0nLCBkYXRlRW5kKS5jbG9uZSgpXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgcm93cyA9IGF3YWl0IHF1ZXJ5LmRlbCgpO1xyXG4gICAgcmVzLnNlbmQoeyBhZmZlY3RlZFJvd3M6IHJvd3MgfSlcclxuICB9KVxyXG5cclxuXHJcblxyXG59Il19