"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Testing = void 0;

var _nanoid = _interopRequireDefault(require("nanoid"));

var _path = _interopRequireDefault(require("path"));

var _recorder = require("./recorder");

var _runner = require("./runner");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const SCENARIO_FOLDER = 'scenarios';

class Testing {
  constructor(bp, botId) {
    _defineProperty(this, "bp", void 0);

    _defineProperty(this, "botId", void 0);

    _defineProperty(this, "_recorder", void 0);

    _defineProperty(this, "_runner", void 0);

    _defineProperty(this, "_scenarios", void 0);

    _defineProperty(this, "_interval", void 0);

    this.bp = bp;
    this.botId = botId;
    this._recorder = new _recorder.Recorder();
    this._runner = new _runner.SenarioRunner(bp);
  }

  async startRecording(chatUserId) {
    await this._ensureHooksEnabled();

    this._recorder.startRecording(chatUserId);
  }

  endRecording() {
    return this._recorder.stopRecording();
  }

  getStatus() {
    return {
      recording: this._recorder.isRecording(),
      running: this._runner.isRunning()
    };
  }

  async getScenarios() {
    if (!this._scenarios) {
      await this._loadScenarios();
    }

    return this._scenarios.map(({
      name,
      steps
    }) => {
      return {
        name,
        steps,
        ...this._runner.getStatus(name)
      };
    });
  }

  processIncomingEvent(event) {
    this._recorder.processIncoming(event);

    return this._runner.processIncoming(event);
  }

  processCompletedEvent(event) {
    this._recorder.processCompleted(event);

    this._runner.processCompleted(event);
  }

  async saveScenario(name, scenario) {
    await this.bp.ghost.forBot(this.botId).upsertFile(SCENARIO_FOLDER, name + '.json', JSON.stringify(scenario, undefined, 2));
    await this._loadScenarios();
  }

  _executeScenario(scenario) {
    const eventDestination = {
      channel: 'web',
      botId: this.botId,
      threadId: undefined,
      target: `test_${(0, _nanoid.default)()}`
    };

    this._runner.runScenario({ ...scenario
    }, eventDestination);
  }

  async executeSingle(liteScenario) {
    await this._ensureHooksEnabled();

    this._runner.startReplay(); // TODO perform scenario validation here


    const scenario = await this.bp.ghost.forBot(this.botId).readFileAsObject(SCENARIO_FOLDER, liteScenario.name + '.json');

    this._executeScenario({ ...liteScenario,
      ...scenario
    });
  }

  async executeAll() {
    await this._ensureHooksEnabled();
    const scenarios = await this._loadScenarios();

    this._runner.startReplay();

    scenarios.forEach(scenario => {
      this._executeScenario(scenario);
    });
  }

  async _ensureHooksEnabled() {
    if (!this._interval) {
      this._interval = setInterval(this._waitTestCompletion.bind(this), 2000);
    }

    await this.bp.experimental.enableHook('00_recorder', 'before_incoming_middleware', 'testing');
    await this.bp.experimental.enableHook('00_recorder', 'after_event_processed', 'testing');
  }

  async _waitTestCompletion() {
    if (!this._runner.isRunning() && !this._recorder.isRecording()) {
      await this.bp.experimental.disableHook('00_recorder', 'before_incoming_middleware', 'testing');
      await this.bp.experimental.disableHook('00_recorder', 'after_event_processed', 'testing');
      clearInterval(this._interval);
      this._interval = undefined;
    }
  }

  async _loadScenarios() {
    const files = await this.bp.ghost.forBot(this.botId).directoryListing(SCENARIO_FOLDER, '*.json');
    this._scenarios = await Promise.map(files, async file => {
      const name = _path.default.basename(file, '.json');

      const scenarioSteps = await this.bp.ghost.forBot(this.botId).readFileAsObject(SCENARIO_FOLDER, file);
      return {
        name,
        ...scenarioSteps
      };
    });
    return this._scenarios;
  }

}

exports.Testing = Testing;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,