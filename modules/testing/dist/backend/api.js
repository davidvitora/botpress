"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = async (bp, testByBot) => {
  const router = bp.http.createRouterForBot('testing');
  router.get('/scenarios', async (req, res) => {
    const scenarios = await testByBot[req.params.botId].getScenarios();
    const status = await testByBot[req.params.botId].getStatus();
    res.send({
      scenarios,
      status
    });
  });
  router.post('/runAll', async (req, res) => {
    await testByBot[req.params.botId].executeAll();
    res.sendStatus(200);
  });
  router.post('/run', async (req, res) => {
    await testByBot[req.params.botId].executeSingle(req.body.scenario);
    res.sendStatus(200);
  });
  router.get('/startRecording/:userId?', async (req, res) => {
    await testByBot[req.params.botId].startRecording(req.params.userId || '');
    res.sendStatus(200);
  });
  router.get('/stopRecording', async (req, res) => {
    res.send((await testByBot[req.params.botId].endRecording()));
  });
  router.post('/saveScenario', async (req, res) => {
    const {
      name,
      steps
    } = req.body;

    if (!name || !steps || !name.length) {
      return res.sendStatus(400);
    }

    await testByBot[req.params.botId].saveScenario(name, steps);
    res.sendStatus(200);
  });
  router.post('/incomingEvent', (req, res) => {
    const event = req.body;
    res.send(testByBot[req.params.botId].processIncomingEvent(event));
  });
  router.post('/processedEvent', (req, res) => {
    const event = req.body;
    res.send(testByBot[req.params.botId].processCompletedEvent(event));
  });
  router.post('/fetchPreviews', async (req, res) => {
    const {
      elementIds
    } = req.body;

    if (!elementIds || !_lodash.default.isArray(elementIds)) {
      return res.sendStatus(400);
    }

    const elements = await bp.cms.getContentElements(req.params.botId, elementIds.map(x => x.replace('#!', '')));
    const rendered = elements.map(element => {
      return {
        id: `#!${element.id}`,
        preview: element.previews.en
      };
    });
    res.send(rendered);
  });
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS50cyJdLCJuYW1lcyI6WyJicCIsInRlc3RCeUJvdCIsInJvdXRlciIsImh0dHAiLCJjcmVhdGVSb3V0ZXJGb3JCb3QiLCJnZXQiLCJyZXEiLCJyZXMiLCJzY2VuYXJpb3MiLCJwYXJhbXMiLCJib3RJZCIsImdldFNjZW5hcmlvcyIsInN0YXR1cyIsImdldFN0YXR1cyIsInNlbmQiLCJwb3N0IiwiZXhlY3V0ZUFsbCIsInNlbmRTdGF0dXMiLCJleGVjdXRlU2luZ2xlIiwiYm9keSIsInNjZW5hcmlvIiwic3RhcnRSZWNvcmRpbmciLCJ1c2VySWQiLCJlbmRSZWNvcmRpbmciLCJuYW1lIiwic3RlcHMiLCJsZW5ndGgiLCJzYXZlU2NlbmFyaW8iLCJldmVudCIsInByb2Nlc3NJbmNvbWluZ0V2ZW50IiwicHJvY2Vzc0NvbXBsZXRlZEV2ZW50IiwiZWxlbWVudElkcyIsIl8iLCJpc0FycmF5IiwiZWxlbWVudHMiLCJjbXMiLCJnZXRDb250ZW50RWxlbWVudHMiLCJtYXAiLCJ4IiwicmVwbGFjZSIsInJlbmRlcmVkIiwiZWxlbWVudCIsImlkIiwicHJldmlldyIsInByZXZpZXdzIiwiZW4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFDQTs7OztlQUllLE9BQU9BLEVBQVAsRUFBdUJDLFNBQXZCLEtBQWdEO0FBQzdELFFBQU1DLE1BQU0sR0FBR0YsRUFBRSxDQUFDRyxJQUFILENBQVFDLGtCQUFSLENBQTJCLFNBQTNCLENBQWY7QUFFQUYsRUFBQUEsTUFBTSxDQUFDRyxHQUFQLENBQVcsWUFBWCxFQUF5QixPQUFPQyxHQUFQLEVBQVlDLEdBQVosS0FBb0I7QUFDM0MsVUFBTUMsU0FBUyxHQUFHLE1BQU1QLFNBQVMsQ0FBQ0ssR0FBRyxDQUFDRyxNQUFKLENBQVdDLEtBQVosQ0FBVCxDQUE0QkMsWUFBNUIsRUFBeEI7QUFDQSxVQUFNQyxNQUFNLEdBQUcsTUFBTVgsU0FBUyxDQUFDSyxHQUFHLENBQUNHLE1BQUosQ0FBV0MsS0FBWixDQUFULENBQTRCRyxTQUE1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QUFsRCxDQUFUO0FBQ0QsR0FIRDtBQUtBMUIsRUFBQUEsTUFBTSxDQUFDYSxJQUFQLENBQVksZ0JBQVosRUFBOEIsT0FBT1QsR0FBUCxFQUFZQyxHQUFaLEtBQW9CO0FBQ2hELFVBQU07QUFBRXdCLE1BQUFBO0FBQUYsUUFBaUJ6QixHQUFHLENBQUNhLElBQTNCOztBQUNBLFFBQUksQ0FBQ1ksVUFBRCxJQUFlLENBQUNDLGdCQUFFQyxPQUFGLENBQVVGLFVBQVYsQ0FBcEIsRUFBMkM7QUFDekMsYUFBT3hCLEdBQUcsQ0FBQ1UsVUFBSixDQUFlLEdBQWYsQ0FBUDtBQUNEOztBQUVELFVBQU1pQixRQUFRLEdBQUcsTUFBTWxDLEVBQUUsQ0FBQ21DLEdBQUgsQ0FBT0Msa0JBQVAsQ0FBMEI5QixHQUFHLENBQUNHLE1BQUosQ0FBV0MsS0FBckMsRUFBNENxQixVQUFVLENBQUNNLEdBQVgsQ0FBZUMsQ0FBQyxJQUFJQSxDQUFDLENBQUNDLE9BQUYsQ0FBVSxJQUFWLEVBQWdCLEVBQWhCLENBQXBCLENBQTVDLENBQXZCO0FBQ0EsVUFBTUMsUUFBUSxHQUFHTixRQUFRLENBQUNHLEdBQVQsQ0FBYUksT0FBTyxJQUFJO0FBQ3ZDLGFBQU87QUFDTEMsUUFBQUEsRUFBRSxFQUFHLEtBQUlELE9BQU8sQ0FBQ0MsRUFBRyxFQURmO0FBRUxDLFFBQUFBLE9BQU8sRUFBRUYsT0FBTyxDQUFDRyxRQUFSLENBQWlCQztBQUZyQixPQUFQO0FBSUQsS0FMZ0IsQ0FBakI7QUFPQXRDLElBQUFBLEdBQUcsQ0FBQ08sSUFBSixDQUFTMEIsUUFBVDtBQUNELEdBZkQ7QUFnQkQsQyIsInNvdXJjZVJvb3QiOiJEOlxcQ29kaWdvIEJvdHByZXNzXFxib3RwcmVzc1xcbW9kdWxlc1xcdGVzdGluZ1xcc3JjXFxiYWNrZW5kIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgc2RrIGZyb20gJ2JvdHByZXNzL3NkaydcclxuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJ1xyXG5cclxuaW1wb3J0IHsgVGVzdEJ5Qm90IH0gZnJvbSAnLi90eXBpbmdzJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgKGJwOiB0eXBlb2Ygc2RrLCB0ZXN0QnlCb3Q6IFRlc3RCeUJvdCkgPT4ge1xyXG4gIGNvbnN0IHJvdXRlciA9IGJwLmh0dHAuY3JlYXRlUm91dGVyRm9yQm90KCd0ZXN0aW5nJylcclxuXHJcbiAgcm91dGVyLmdldCgnL3NjZW5hcmlvcycsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xyXG4gICAgY29uc3Qgc2NlbmFyaW9zID0gYXdhaXQgdGVzdEJ5Qm90W3JlcS5wYXJhbXMuYm90SWRdLmdldFNjZW5hcmlvcygpXHJcbiAgICBjb25zdCBzdGF0dXMgPSBhd2FpdCB0ZXN0QnlCb3RbcmVxLnBhcmFtcy5ib3RJZF0uZ2V0U3RhdHVzKClcclxuXHJcbiAgICByZXMuc2VuZCh7IHNjZW5hcmlvcywgc3RhdHVzIH0pXHJcbiAgfSlcclxuXHJcbiAgcm91dGVyLnBvc3QoJy9ydW5BbGwnLCBhc3luYyAocmVxLCByZXMpID0+IHtcclxuICAgIGF3YWl0IHRlc3RCeUJvdFtyZXEucGFyYW1zLmJvdElkXS5leGVjdXRlQWxsKClcclxuICAgIHJlcy5zZW5kU3RhdHVzKDIwMClcclxuICB9KVxyXG5cclxuICByb3V0ZXIucG9zdCgnL3J1bicsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xyXG4gICAgYXdhaXQgdGVzdEJ5Qm90W3JlcS5wYXJhbXMuYm90SWRdLmV4ZWN1dGVTaW5nbGUocmVxLmJvZHkuc2NlbmFyaW8pXHJcbiAgICByZXMuc2VuZFN0YXR1cygyMDApXHJcbiAgfSlcclxuXHJcbiAgcm91dGVyLmdldCgnL3N0YXJ0UmVjb3JkaW5nLzp1c2VySWQ/JywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XHJcbiAgICBhd2FpdCB0ZXN0QnlCb3RbcmVxLnBhcmFtcy5ib3RJZF0uc3RhcnRSZWNvcmRpbmcocmVxLnBhcmFtcy51c2VySWQgfHwgJycpXHJcbiAgICByZXMuc2VuZFN0YXR1cygyMDApXHJcbiAgfSlcclxuXHJcbiAgcm91dGVyLmdldCgnL3N0b3BSZWNvcmRpbmcnLCBhc3luYyAocmVxLCByZXMpID0+IHtcclxuICAgIHJlcy5zZW5kKGF3YWl0IHRlc3RCeUJvdFtyZXEucGFyYW1zLmJvdElkXS5lbmRSZWNvcmRpbmcoKSlcclxuICB9KVxyXG5cclxuICByb3V0ZXIucG9zdCgnL3NhdmVTY2VuYXJpbycsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xyXG4gICAgY29uc3QgeyBuYW1lLCBzdGVwcyB9ID0gcmVxLmJvZHlcclxuICAgIGlmICghbmFtZSB8fCAhc3RlcHMgfHwgIW5hbWUubGVuZ3RoKSB7XHJcbiAgICAgIHJldHVybiByZXMuc2VuZFN0YXR1cyg0MDApXHJcbiAgICB9XHJcblxyXG4gICAgYXdhaXQgdGVzdEJ5Qm90W3JlcS5wYXJhbXMuYm90SWRdLnNhdmVTY2VuYXJpbyhuYW1lLCBzdGVwcylcclxuICAgIHJlcy5zZW5kU3RhdHVzKDIwMClcclxuICB9KVxyXG5cclxuICByb3V0ZXIucG9zdCgnL2luY29taW5nRXZlbnQnLCAocmVxLCByZXMpID0+IHtcclxuICAgIGNvbnN0IGV2ZW50ID0gcmVxLmJvZHkgYXMgc2RrLklPLkluY29taW5nRXZlbnRcclxuICAgIHJlcy5zZW5kKHRlc3RCeUJvdFtyZXEucGFyYW1zLmJvdElkXS5wcm9jZXNzSW5jb21pbmdFdmVudChldmVudCkpXHJcbiAgfSlcclxuXHJcbiAgcm91dGVyLnBvc3QoJy9wcm9jZXNzZWRFdmVudCcsIChyZXEsIHJlcykgPT4ge1xyXG4gICAgY29uc3QgZXZlbnQgPSByZXEuYm9keSBhcyBzZGsuSU8uSW5jb21pbmdFdmVudFxyXG4gICAgcmVzLnNlbmQodGVzdEJ5Qm90W3JlcS5wYXJhbXMuYm90SWRdLnByb2Nlc3NDb21wbGV0ZWRFdmVudChldmVudCkpXHJcbiAgfSlcclxuXHJcbiAgcm91dGVyLnBvc3QoJy9mZXRjaFByZXZpZXdzJywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XHJcbiAgICBjb25zdCB7IGVsZW1lbnRJZHMgfSA9IHJlcS5ib2R5XHJcbiAgICBpZiAoIWVsZW1lbnRJZHMgfHwgIV8uaXNBcnJheShlbGVtZW50SWRzKSkge1xyXG4gICAgICByZXR1cm4gcmVzLnNlbmRTdGF0dXMoNDAwKVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGVsZW1lbnRzID0gYXdhaXQgYnAuY21zLmdldENvbnRlbnRFbGVtZW50cyhyZXEucGFyYW1zLmJvdElkLCBlbGVtZW50SWRzLm1hcCh4ID0+IHgucmVwbGFjZSgnIyEnLCAnJykpKVxyXG4gICAgY29uc3QgcmVuZGVyZWQgPSBlbGVtZW50cy5tYXAoZWxlbWVudCA9PiB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgaWQ6IGAjISR7ZWxlbWVudC5pZH1gLFxyXG4gICAgICAgIHByZXZpZXc6IGVsZW1lbnQucHJldmlld3MuZW5cclxuICAgICAgfVxyXG4gICAgfSlcclxuXHJcbiAgICByZXMuc2VuZChyZW5kZXJlZClcclxuICB9KVxyXG59XHJcbiJdfQ==